<%- include("./modal/personal_modal.ejs") %>
<div class="container mb-3">
  <table id="personal_info" class="display" style="width: 100%">
    <thead>
      <tr>
        <th>Çalışan ID</th>
        <th>Ad-Soyad</th>
        <th>Cinsiyet</th>
        <th>Doğum Tarihi</th>
        <th>Doğum Yeri</th>
        <th>Uyruğu</th>
        <th>Kan Grubu</th>
        <th>Anne Adı</th>
        <th>Baba Adı</th>
        <th>Askerlik Durumu</th>
        <th>Eğitim Durumu</th>
        <th>Sicil No</th>
        <th>İşlem</th>
      </tr>
    </thead>
    <tbody></tbody>
    <tfoot>
      <tr>
        <th>Çalışan ID</th>
        <th>Ad-Soyad</th>
        <th>Cinsiyet</th>
        <th>Doğum Tarihi</th>
        <th>Doğum Yeri</th>
        <th>Uyruğu</th>
        <th>Kan Grubu</th>
        <th>Anne Adı</th>
        <th>Baba Adı</th>
        <th>Askerlik Durumu</th>
        <th>Eğitim Durumu</th>
        <th>Sicil No</th>
        <th>İşlem</th>
      </tr>
    </tfoot>
  </table>
</div>

<script>
  function editPersonal(apiUrl, userId) {
    console.log(apiUrl, userId);
    userid = userId;
    console.log(userid);

    $.ajax({
      url: apiUrl,
      method: "GET",
      success: function (data) {
        console.log(data);
        $(userid).val(data.employee_id)
        const birthDate = new Date(data.birth_date);
        const formattedDate = birthDate.toISOString().split("T")[0];
        $("#modalInputBirthDate").val(formattedDate);
        $("#modalInputNationality").val(data.nationality);
        $("#modalSelectGender").val(data.gender || "");
        $("#modalSelectMaritalStatus").val(data.marital_status || "");
        $("#modalSelectBloodType").val(data.blood_type || "");
        $("#modalInputMotherName").val(data.mother_name);
        $("#modalInputFatherName").val(data.father_name);
        $("#modalSelectMilitaryStatus").val(data.military_status || "");
        $("#modalSelectEducationLevel").val(data.education_level || "");
        $("#modalInputBirthPlace").val(data.birth_place);
        $("#modalInputRegistrationNumber").val(data.registration_number);

        $("#editPersonalInfoModal").modal("show");
      },
      error: function (err) {
        showToast("Kullanıcı bilgileri alınırken", "Bir hata oluştu");
        console.error("Kullanıcı bilgileri alınırken bir hata oluştu.", err);
      },
    });
  }
  $(document).ready(function () {
    var table = $("#personal_info").DataTable({
      ajax: {
        url: "/admin/api/calisanlar/personal",
        dataSrc: "",
      },
      columns: [
        { data: "employee_id" },
        {
          data: "first_name",
          render: function (data, type, row) {
            return `${row.first_name || "N/A"} ${row.last_name || "N/A"}`;
          },
        },
        {
          data: "gender",
          render: function (data) {
            return data || "N/A";
          },
        },
        {
          data: "birth_date",
          render: function (data) {
            return data ? moment(data).format("DD/MM/YYYY") : "N/A";
          },
        },
        {
          data: "birth_place",
          render: function (data) {
            return data || "N/A";
          },
        },
        {
          data: "nationality",
          render: function (data) {
            return data || "N/A";
          },
        },
        {
          data: "blood_type",
          render: function (data) {
            return data || "N/A";
          },
        },
        {
          data: "mother_name",
          render: function (data) {
            return data || "N/A";
          },
        },
        {
          data: "father_name",
          render: function (data) {
            return data || "N/A";
          },
        },
        {
          data: "military_status",
          render: function (data, type, row) {
            // Cinsiyet kadınsa askeri durum sütununu boş bırak
            return row.gender === "Kadın" ? "Muaf" : data || "N/A";
          },
        },
        {
          data: "education_level",
          render: function (data) {
            return data || "N/A";
          },
        },
        {
          data: "registration_number",
          render: function (data) {
            return data || "N/A";
          },
        },
        {
          data: "employee_id",
          render: function (data, type, row) {
            return `<a href="#" class="btn btn-warning btn-sm" onclick="editPersonal('/admin/api/calisanlar/personal/${data}', '${data}')">
                    <ion-icon name="create-outline" data-toggle="tooltip" title="DÜZENLE"></ion-icon></a>
                    <a href="#" class="btn btn-danger btn-sm"  onclick="confirmDelete('/admin/api/calisanlar/personal/${data}', ${data},'#personal_info')">
                    <ion-icon name="trash" data-toggle="tooltip" title="SİL"></ion-icon></a>`;
          },
        },
      ],
      dom: "Blfrtip", // Butonlar ve filtreler için yapılandırma
      buttons: [
        {
          extend: "colvis",
          text: '<i class="fa fa-eye" data-toggle="tooltip" title="Kolonları Göster/Gizle"></i>',
        },
        {
          extend: "excelHtml5",
          text: '<i class="fa fa-file-excel-o" data-toggle="tooltip" data-original-title="Excel\'e Aktar"></i>',
          title: "Çalışanlar " + moment(new Date()).format("DD-MM-YYYY"),
          exportOptions: {
            columns: ":visible",
          },
        },
        {
          extend: "print",
          text: '<i class="fa fa-print" data-toggle="tooltip" data-original-title="Yazdır"></i>',
          title: "Çalışanlar " + moment(new Date()).format("DD-MM-YYYY"),
          exportOptions: {
            columns: ":visible",
          },
        },
      ],

      fixedColumns: {
        leftColumns: 1,
      },
      fixedHeader: true,
      scrollCollapse: true,
      scrollX: true,
      lengthMenu: [
        [10, 25, 50, -1],
        [10, 25, 50, "All"],
      ],
      language: {
        lengthMenu: " _MENU_ Sayfa başı kayıt Sayısı",
        zeroRecords: "Kayıt bulunamadı",
        info: "_TOTAL_ kayıttan _START_ - _END_ arası gösteriliyor",
        infoEmpty: "Kayıt yok",
        infoFiltered: "(toplam _MAX_ kayıttan filtrelendi)",
        searching: true,
        search: "Ara:",
        paginate: {
          first: "İlk",
          last: "Son",
          next: "Sonraki",
          previous: "Önceki",
        },
      },
      initComplete: function () {
        this.api()
          .columns()
          .every(function () {
            let column = this;
            let title = column.footer().textContent;

            let input = document.createElement("input");
            input.placeholder = title;
            column.footer().replaceChildren(input);

            input.addEventListener("keyup", () => {
              if (column.search() !== this.value) {
                column.search(input.value).draw();
              }
            });
          });
      },
    });
    $('[data-toggle="tooltip"]').tooltip();
  });
</script>
