<%- include("./modal/job_modal.ejs") %>
<div class="tab-content" id="nav-tabContent">
  <table id="job-info" class="display" style="width: 100%">
    <thead>
      <tr>
        <th>Çalışan ID</th>
        <th>Ad-Soyad</th>
        <th>Çalıştığı Bölüm</th>
        <th>Çalıştığı Birim</th>
        <th>Çalışan Türü</th>
        <th>Unvanı</th>
        <th>Görev</th>
        <th>Yaptığı İş</th>
        <th>İşe Giriş Tarihi</th>
        <th>Çıkış Tarihi</th>
        <th>Grup</th>
        <th>İşlemler</th>
      </tr>
    </thead>
    <tbody></tbody>
    <tfoot>
      <tr>
        <th>Çalışan ID</th>
        <th>Ad-Soyad</th>
        <th>Çalıştığı Bölüm</th>
        <th>Çalıştığı Birim</th>
        <th>Çalışan Türü</th>
        <th>Unvanı</th>
        <th>Görev</th>
        <th>Yaptığı İş</th>
        <th>İşe Giriş Tarihi</th>
        <th>Çıkış Tarihi</th>
        <th>Grup</th>
        <th>İşlemler</th>
      </tr>
    </tfoot>
  </table>
</div>
<script>
  function loadJobTitles() {
    $.ajax({
      url: "/admin/api/is_unvanlari",
      method: "GET",
      success: function (titles) {
        const jobTitleSelect = $("#jobTitle");
        jobTitleSelect.empty();
        jobTitleSelect.append('<option value="">İş Unvanı Seçin</option>');
        titles.forEach((title) => {
          jobTitleSelect.append(
            `<option value="${title.id}">${title.title_name}</option>`
          );
        });
      },
      error: function (err) {
        console.error("İş unvanları alınırken bir hata oluştu.", err);
      },
    });
  }

  function loadJobTasks() {
    $.ajax({
      url: "/admin/api/gorevler",
      method: "GET",
      success: function (tasks) {
        const jobTaskSelect = $("#jobTask");
        jobTaskSelect.empty();
        jobTaskSelect.append('<option value="">Görev Seçin</option>');
        tasks.forEach((task) => {
          jobTaskSelect.append(
            `<option value="${task.id}">${task.task_name}</option>`
          );
        });
      },
      error: function (err) {
        console.error("Görevler alınırken bir hata oluştu.", err);
      },
    });
  }

  function loadDepartments() {
    $.ajax({
      url: "/admin/api/bolumler", // Doğru URL'yi kontrol edin
      method: "GET",
      success: function (departments) {
        const departmentSelect = $("#department");
        departmentSelect.empty();
        departmentSelect.append('<option value="">Bölüm Seçin</option>');
        departments.forEach((department) => {
          departmentSelect.append(
            `<option value="${department.id}">${department.department_name}</option>`
          );
        });
      },
      error: function (err) {
        console.error("Bölümler alınırken bir hata oluştu.", err);
      },
    });
  }

  function loadDivisions() {
    $.ajax({
      url: "/admin/api/birlikler",
      method: "GET",
      success: function (divisions) {
        const divisionSelect = $("#division");
        divisionSelect.empty();
        divisionSelect.append('<option value="">Birlik Seçin</option>');
        divisions.forEach((division) => {
          divisionSelect.append(
            `<option value="${division.id}">${division.division_name}</option>`
          );
        });
      },
      error: function (err) {
        console.error("Birlikler alınırken bir hata oluştu.", err);
      },
    });
  }
  function loadEmployeeTypes() {
    $.ajax({
      url: "/admin/api/calisan_turleri",
      method: "GET",
      success: function (types) {
        const employeeTypeSelect = $("#employeeType");
        employeeTypeSelect.empty();
        employeeTypeSelect.append(
          '<option value="">Çalışan Türü Seçin</option>'
        );
        types.forEach((type) => {
          employeeTypeSelect.append(
            `<option value="${type.id}">${type.type_name}</option>`
          );
        });
      },
      error: function (err) {
        console.error("Çalışan türleri alınırken bir hata oluştu.", err);
      },
    });
  }

  function loadGroups() {
    $.ajax({
      url: "/admin/api/gruplar",
      method: "GET",
      success: function (groups) {
        const groupSelect = $("#groupName");
        groupSelect.empty();
        groupSelect.append('<option value="">Grup Adı Seçin</option>');
        groups.forEach((group) => {
          groupSelect.append(
            `<option value="${group.id}">${group.group_name}</option>`
          );
        });
      },
      error: function (err) {
        console.error("Gruplar alınırken bir hata oluştu.", err);
      },
    });
  }

  $("#jobInfoModal").on("show.bs.modal", function () {
    loadJobTitles();
    loadJobTasks();
    loadDepartments();
    loadDivisions();
    loadEmployeeTypes();
    loadGroups();
  });
  function editJob(apiUrl, jobId) {
    console.log(apiUrl, jobId);
    userid = jobId;

    $.ajax({
      url: apiUrl,
      method: "GET",
      success: function (data) {
        console.log(data);
        $("#modalInputEmployeeId").val(data.employee_id);
        $("#modalInputFirstName").val(data.first_name);
        $("#modalInputLastName").val(data.last_name);
        $("#modalInputTitle").val(data.title);
        $("#modalInputTask").val(data.task);
        $("#modalInputDivision").val(data.division);
        $("#modalInputDepartment").val(data.department);
        $("#modalInputJobDescription").val(data.job_description);
        $("#modalInputEmployeeType").val(data.employee_type);
        $("#modalInputGroupName").val(data.group_name || "");
        const employmentStartDate = new Date(data.employment_start_date);
        const formattedStartDate = employmentStartDate
          .toISOString()
          .split("T")[0];
        $("#modalInputEmploymentStartDate").val(formattedStartDate);
        const terminationDate = data.termination_date
          ? new Date(data.termination_date)
          : null;
        const formattedTerminationDate = terminationDate
          ? terminationDate.toISOString().split("T")[0]
          : "";
        $("#modalInputTerminationDate").val(formattedTerminationDate);

        $("#jobInfoModal").modal("show");
      },
      error: function (err) {
        showToast("İş bilgileri alınırken", "Bir hata oluştu");
        console.error("İş bilgileri alınırken bir hata oluştu.", err);
      },
    });
  }

  $(document).ready(function () {
    var table = $("#job-info").DataTable({
      ajax: {
        url: "/admin/api/calisanlar/job",
        dataSrc: "",
      },
      columns: [
        { data: "employee_id" },
        {
          data: "first_name",
          render: function (data, type, row) {
            return `${row.first_name} ${row.last_name}`;
          },
        },
        { data: "department" },
        { data: "division" },
        { data: "employee_type" },
        { data: "title" },
        { data: "task" },
        {
          data: "job_description",
          render: function (data) {
            return `<span class="ellipsis">${ellipsis(data, 100)}</span>`;
          },
        },
        {
          data: "employment_start_date",
          render: function (data) {
            return moment(data).format("DD/MM/YYYY");
          },
        },
        {
          data: "termination_date",
          render: function (data) {
            return data ? moment(data).format("DD/MM/YYYY") : "N/A";
          },
        },
        {
          data: "group_name",
          render: function (data) {
            return data ? data : "-";
          },
        },
        {
          data: "employee_id",
          render: function (data, type, row) {
            return `<a href="#" class="btn btn-warning btn-sm" onclick="editJob('/admin/api/calisanlar/job/${data}', '${data}')">
                    <ion-icon name="create-outline" data-toggle="tooltip" title="DÜZENLE"></ion-icon></a>
                    <a href="#" class="btn btn-danger btn-sm"  onclick="confirmDelete('/admin/api/calisanlar/job/${data}', ${data},'#job-info')">
                    <ion-icon name="trash" data-toggle="tooltip" title="SİL"></ion-icon></a>`;
          },
        },
      ],
      dom: "Blfrtip", // Butonlar ve filtreler için yapılandırma
      buttons: [
        {
          extend: "colvis",
          text: '<i class="fa fa-eye" data-toggle="tooltip" title="Kolonları Göster/Gizle"></i>',
        },
        {
          extend: "excelHtml5",
          text: '<i class="fa fa-file-excel-o" data-toggle="tooltip" data-original-title="Excel\'e Aktar"></i>',
          title: "Çalışanlar " + moment(new Date()).format("DD-MM-YYYY"),
          exportOptions: {
            columns: ":visible",
          },
        },
        {
          extend: "print",
          text: '<i class="fa fa-print" data-toggle="tooltip" data-original-title="Yazdır"></i>',
          title: "Çalışanlar " + moment(new Date()).format("DD-MM-YYYY"),
          exportOptions: {
            columns: ":visible",
          },
        },
      ],
      fixedColumns: {
        leftColumns: 1,
      },
      fixedHeader: true,
      scrollCollapse: true,
      scrollX: true,
      //sayfalama kısmındaki menü kısmını düzenlmeye yarar.
      lengthMenu: [
        [10, 25, 50, -1],
        [10, 25, 50, "All"],
      ],
      language: {
        lengthMenu: " _MENU_ Sayfa başı kayıt Sayısı",
        zeroRecords: "Kayıt bulunamadı",
        info: "_TOTAL_ kayıttan _START_ - _END_ arası gösteriliyor",
        infoEmpty: "Kayıt yok",
        infoFiltered: "(toplam _MAX_ kayıttan filtrelendi)",
        searching: true,
        search: "Ara:",
        paginate: {
          first: "İlk",
          last: "Son",
          next: "Sonraki",
          previous: "Önceki",
        },
      },
      initComplete: function () {
        // Her sütun için footer'da arama kutuları oluştur
        this.api()
          .columns()
          .every(function () {
            let column = this;
            let title = column.footer().textContent;
            let input = document.createElement("input");
            input.placeholder = title;
            column.footer().replaceChildren(input);

            input.addEventListener("keyup", function () {
              if (column.search() !== input.value) {
                column.search(input.value).draw();
              }
            });
          });
      },
    });
    $('[data-toggle="tooltip"]').tooltip();
  });
</script>
