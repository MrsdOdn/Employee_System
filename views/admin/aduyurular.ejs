<button
  type="button"
  class="btn btn-annoucement mb-2"
  data-toggle="modal"
  data-target="#announcementModal"
>
  <ion-icon name="add-circle"></ion-icon>
  Duyuru Ekle
</button>

<%- include('../partials/delete_confirm_modal.ejs') %>

<div class="container mb-3">
    <table id="announcements-table" class="display" style="width: 100%">
      <thead>
        <tr>
          <th>Duyuru ID</th>
          <th>Kategori</th>
          <th>Başlık</th>
          <th>İçerik</th>
          <th>Yayınlayan</th>
          <th>Yayınlanacağı Tarih</th>
          <th>Kaldırılıcağı Tarih</th>
          <th>Durum</th>
          <th>Yazıldığı Tarih</th>
          <th>İşlemler</th>
        </tr>
      </thead>
      <tbody></tbody>
      <tfoot>
        <tr>
          <th>Duyuru ID</th>
          <th>Kategori</th>
          <th>Başlık</th>
          <th>İçerik</th>
          <th>Yayınlayan</th>
          <th>Yayınlanacağı Tarih</th>
          <th>Kaldırılıcağı Tarih</th>
          <th>Durum</th>
          <th>Yazıldığı Tarih</th>
          <th>İşlemler</th>
        </tr>
      </tfoot>
    </table>
  </div>
</div>

<div
  class="modal fade"
  id="announcementModal"
  tabindex="-1"
  role="dialog"
  aria-labelledby="announcementModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog " role="document">
    <div class="modal-content black-backend">
      <div class="modal-header">
        <h5 class="modal-title" id="announcementModalLabel">Duyuru Ekle</h5>
        <button
          type="button"
          class="close"
          data-dismiss="modal"
          aria-label="Close"
        >
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="announcementForm">
          <div class="form-group">
            <label for="announcementTitle">Başlık</label>
            <input
              type="text"
              class="form-control"
              id="announcementTitle"
              placeholder="Duyuru başlığını girin"
              required
            />
          </div>
          <div class="form-group">
            <label for="announcementContent">Duyuru İçeriği</label>
            <textarea
              class="form-control"
              id="announcementContent"
              rows="4"
              placeholder="Duyuru içeriğini girin"
              required
            ></textarea>
          </div>
          <div class="form-group">
            <label for="announcementCategory">Kategori</label>
            <select class="form-control" id="announcementCategory" required>
              <option value="">Kategori Seçin</option>
              <!-- Kategoriler dinamik olarak yüklenecek -->
            </select>
          </div>
          <div class="form-group">
            <label for="publishDate">Yayınlanacağı Tarihi</label>
            <input
              type="datetime-local"
              class="form-control"
              id="publishDate"
              required
            />
          </div>
          <div class="form-group">
            <label for="expirationDate">Son Geçerlilik Tarihi</label>
            <input
              type="datetime-local"
              class="form-control"
              id="expirationDate"
              required
            />
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">
          Kapat
        </button>
        <button type="button" class="btn btn-primary" id="submitAnnouncement">
          Ekle
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  function ellipsis(text, maxLength) {
    if (text.length > maxLength) {
      return text.substring(0, maxLength) + "...";
    }
    return text;
  }
  $(document).ready(function () {
    var table = $("#announcements-table").DataTable({
      ajax: {
        url: "/admin/duyurular/data",
        dataSrc: "",
      },
      columns: [
        { data: "id" },
        { data: "name" },
        { data: "title" },
        {
          data: "content",
          render: function (data, type, row) {
            return `<span class="ellipsis">${ellipsis(data, 200)}</span>`;
          },
        },
        {
          data: "first_name",
          render: function (data, type, row) {
            return `${row.first_name} ${row.last_name}`;
          },
        },
        {
          data: "publish_date",
          render: function (data, type, row) {
            return moment(data).format("DD/MM/YYYY");
          },
        },
        {
          data: "expiry_date",
          render: function (data, type, row) {
            return data ? moment(data).format("DD/MM/YYYY") : "N/A";
          },
        },
        { data: "status" },
        {
          data: "created_at",
          render: function (data) {
            return moment(data).format("DD/MM/YYYY");
          },
        },
        {
          data: "id",
          render: function (data, type, row) {
            return `<a href="/edit/${data}" class="btn btn-warning btn-sm">
                    <ion-icon name="create-outline"></ion-icon>
                    <a href="#" class="btn btn-danger btn-sm"  onclick="confirmDelete('/admin/duyurular/data/${data}', ${data})">
                    <ion-icon name="trash"></ion-icon></a>`;
          },
        },
      ],
      dom: "Blfrtip", // Butonlar ve filtreler için yapılandırma
      buttons: [
        {
          extend: "colvis",
          text: '<i class="fa fa-eye" data-toggle="tooltip" title="Kolonları Göster/Gizle"></i>',
        },
        {
          extend: "excelHtml5",
          text: '<i class="fa fa-file-excel-o" data-toggle="tooltip" data-original-title="Excel\'e Aktar"></i>',
          title: "Çalışanlar " + moment(new Date()).format("DD-MM-YYYY"),
          exportOptions: {
            columns: ":visible",
          },
        },
        {
          extend: "print",
          text: '<i class="fa fa-print" data-toggle="tooltip" data-original-title="Yazdır"></i>',
          title: "Çalışanlar " + moment(new Date()).format("DD-MM-YYYY"),
          exportOptions: {
            columns: ":visible",
          },
        },
      ],
      fixedColumns: {
        leftColumns: 1,
      },
      fixedHeader: true,
      scrollCollapse: true,
      scrollY: "100vh",
      scrollX: true,
      //sayfalama kısmındaki menü kısmını düzenlmeye yarar.
      lengthMenu: [
        [10, 25, 50, -1],
        [10, 25, 50, "All"],
      ],
      language: {
        lengthMenu: " _MENU_ Sayfa başı kayıt Sayısı",
        zeroRecords: "Kayıt bulunamadı",
        info: "_TOTAL_ kayıttan _START_ - _END_ arası gösteriliyor",
        infoEmpty: "Kayıt yok",
        infoFiltered: "(toplam _MAX_ kayıttan filtrelendi)",
        search: "Ara:",
        paginate: {
          first: "İlk",
          last: "Son",
          next: "Sonraki",
          previous: "Önceki",
        },
      },

      initComplete: function () {
        this.api()
          .columns()
          .every(function () {
            let column = this;
            let title = column.footer().textContent;

            let input = document.createElement("input");
            input.placeholder = title;
            column.footer().replaceChildren(input);

            input.addEventListener("keyup", () => {
              if (column.search() !== this.value) {
                column.search(input.value).draw();
              }
            });
          });
      },
      
    });

    $.ajax({
      url: '/admin/duyurular/category/data',
      dataSrc: "",
      method: 'GET',
      success: function (data) {
        const $categorySelect = $("#announcementCategory");
        data.forEach(category => {
          const option = `<option value="${category.id}">${category.name}</option>`;
          $categorySelect.append(option);
        });
      },
      error: function (err) {
        console.error("Kategoriler yüklenirken hata oluştu", err);
      }
    });
    $('[data-toggle="tooltip"]').tooltip();
    let employeeId;
    
    $.ajax({
    url: '/api/user',
    method: 'GET',
    dataType: 'json',
    success: function(data) {
        $('#employeeId').text(`Employee ID: ${data.employee_id}`);
        employeeId = data.employee_id; 
    },
    error: function(jqXHR, textStatus, errorThrown) {
        console.error('Hata:', textStatus, errorThrown);
    }
    });
    

    $("#submitAnnouncement").on("click", function () {
      event.preventDefault(); // Varsayılan form gönderimini engelle
      const announcementData = {
        title: $("#announcementTitle").val(),
        content: $("#announcementContent").val(),
        published_by: employeeId,
        publish_date: $("#publishDate").val(),
        expiry_date: $("#expirationDate").val(),
        status: "active",
        created_at: new Date(),
        category_id: $("#announcementCategory").val()
    };
    console.log("Gönderilecek veriler:", announcementData);
        
    $.ajax({
        type: "POST",
        url: '/admin/duyurular/data',
        contentType: "application/json",
        data: JSON.stringify(announcementData),
        success: function (data) {
            alert("Duyuru başarıyla eklendi! ID: " + data.id);

            $("#announcementModal").modal("hide");
            $("#announcementForm")[0].reset();
        },
        error: function (jqXHR, textStatus, errorThrown) {
            console.error('Hata:', textStatus, errorThrown);
            alert("Bir hata oluştu: " + jqXHR.responseText);
        }
    });
});
  });
</script>
